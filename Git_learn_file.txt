1. 初始化一个Git仓库，使用git init命令。
2. 添加文件到Git仓库，分两步:
	1. 使用命令git add <file>, 注意反复多次使用，添加多个文件。
	2. 使用命令git commit -m "修改备注"，完成提交。
3. 要随时掌握工作区的状态，使用git status命令。
4. 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
5. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
   使用命令git reset --hard commit_id。如果只是想返回到上一个版本，
   可以使用git reset --hard HEAD^，或者使用git reset --hard HEAD~1
   (这里的数字是指返回到上多少个版本，版本太多不建议使用)。
6. 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
7. 要重返未来，用git reflog查看命令历史， 以便确定要回到未来的哪个版本。
8. 每次修改，如果不add到暂存区，那就不会加入到commit中。简单说，
   每一次修改都应该git add filename添加到暂存区，然后再git commit -m "提交备注"。
   否则只是将暂存区的内容提交到版本管理。
9. 如果你想放弃工作区修改的内容时，可以使用命令git checkout -- fileName。
10.当你将工作区的内容已经放到暂存区时，但是又想放弃该文件的修改。可以分两步：
    1)git reset HEAD fileName将文件回退到版本状态且清除了git add存放在暂存区的信息。
	2)git checkout -- fileName将文件从版本中还原。
11.当你提交到版本库时，又想放弃提交。可以使用git reset HEAD^回退到上一个版本。
   (前提是没有提交到远程版本库)
12.命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心
   误删，但是要小心，你只能恢复文件文件最新版本，你会丢失最近一次提交后你修改的内容。
13.要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git。
   关联后使用命令git push -u origin master第一次推送master分支的所有内容。
   此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。
14.分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都
   可以正常工作，而SVN在没有联网的时候是拒绝工作的！当有网络的时候，再把本地提交推送一下就
   完成了同步，这点是非常方便。
15.要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
   Git支持多种协议，包括https，但通过ssh支持的原生git协议最快。
16.Git鼓励大量使用分支：
   1) 查看分支：git branch(*表示当前分支)
   2) 创建分支: git branch <name>
   3) 切换分支: git checkout <name>
   4) 创建+切换分支: git checkout -b <name>
   5) 合并某分支到当前分支: git merge <name>
   6) 删除分支: git branch -d <name>
17.Git用<<<<<<< and ======= and >>>>>>>标记出不同分支的内容。
   当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
18.用git log --graph命令可以看到分支合并图：如git log --graph --pretty=oneline --abbrev-commit
19.合并分支时, Git会用Fast forward模式这种模式下，删除分支后，会丢掉分支信息。
   强制禁用Fast forward模式, Git会在merge时生成一个新的commit, 这样就可以从分支历史上看到分支信息。
   如: git merge --no-ff -m "备注信息" <分支名name>
20.分支策略几个原则:
   1)master分支应该是非常稳定，仅用来发布最新版本，平时不在上面工作
   2)工作都在dev分支上。即dev分支不稳定，到发布的时候，再将dev分支合并到master上。
21.修复Bug时，我们会通过创建新的Bug分支进行修复，然后合并最后删除。
   当手头工作没有完成时，先把工作现场git stash一下，然后去修改Bug。
   修复后，再用git stash pop或git stash apply回到工作现场。
   一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除。
   另一种方式是用git stash pop，恢复的同时把stash内容也删了。
22.开发一个新功能，最好新建分支;
23.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>来强行删除。
24.查看远程库信息，使用git remote -v;
25.本地新建的分支如果不推送到远程，对其他人就是不可见的;
26.从本地推送分支，使用git push origin branch-name, 如果推送失败，先用git pull抓取远程的新提交。
27.从本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name, 本地和远程
   分支的名称最好一致。
28.建立本地分支和远程分支的关联，使用git branch  --set-upstream branch-name origin/branch-name;
29.从远程抓取分支，使用git pull, 如果有冲突，要先处理冲突。
   1)首先，可以试图用git push origin branch-name推送自己的修改；
   2)如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
   3)如果合并有冲突，则解决冲突，并在本地提交；
   4)没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
30.命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit_id;
   git tag -a <tagname> -m "备注" commit_id; 默认是HEAD。创建一个带有说明的标签。
   git tag -s <tagname> -m "备注" commit_id;默认是HEAD。创建一个私钥的标签。(采用PGP签名，要安装GPG(GunPG)).
   命令git tag可以查看所有标签。
31.1)命令git push origin <tagname>可以推送一个本地标签。
   2)命令git push origin --tags可以将所有的标签推送远程。
   3)命令git tag -d <tagname>删除一个本地标签。
   4)命令git push origin :refs/tags/<tagname>可以删除一个远程标签。(前提本地先删除)
















































