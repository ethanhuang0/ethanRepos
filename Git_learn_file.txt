1. 初始化一个Git仓库，使用git init命令。
2. 添加文件到Git仓库，分两步:
	1. 使用命令git add <file>, 注意反复多次使用，添加多个文件。
	2. 使用命令git commit -m "修改备注"，完成提交。
3. 要随时掌握工作区的状态，使用git status命令。
4. 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
5. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
   使用命令git reset --hard commit_id。如果只是想返回到上一个版本，
   可以使用git reset --hard HEAD^，或者使用git reset --hard HEAD~1
   (这里的数字是指返回到上多少个版本，版本太多不建议使用)。
6. 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
7. 要重返未来，用git reflog查看命令历史， 以便确定要回到未来的哪个版本。
8. 每次修改，如果不add到暂存区，那就不会加入到commit中。简单说，
   每一次修改都应该git add filename添加到暂存区，然后再git commit -m "提交备注"。
   否则只是将暂存区的内容提交到版本管理。
9. 如果你想放弃工作区修改的内容时，可以使用命令git checkout -- fileName。
10.当你将工作区的内容已经放到暂存区时，但是又想放弃该文件的修改。可以分两步：
    1)git reset HEAD fileName将文件回退到版本状态且清除了git add存放在暂存区的信息。
	2)git checkout -- fileName将文件从版本中还原。
11.当你提交到版本库时，又想放弃提交。可以使用git reset HEAD^回退到上一个版本。
   (前提是没有提交到远程版本库)
12.命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心
   误删，但是要小心，你只能恢复文件文件最新版本，你会丢失最近一次提交后你修改的内容。
13.要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git。
   关联后使用命令git push -u origin master第一次推送master分支的所有内容。
   此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。
14.分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都
   可以正常工作，而SVN在没有联网的时候是拒绝工作的！当有网络的时候，再把本地提交推送一下就
   完成了同步，这点是非常方便。
15.要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
   Git支持多种协议，包括https，但通过ssh支持的原生git协议最快。
16.Git鼓励大量使用分支：
   1) 查看分支：git branch(*表示当前分支)
   2) 创建分支: git branch <name>
   3) 切换分支: git checkout <name>
   4) 创建+切换分支: git checkout -b <name>
   5) 合并某分支到当前分支: git merge <name>
   6) 删除分支: git branch -d <name>
17.Git用<<<<<<< and ======= and >>>>>>>标记出不同分支的内容。
   当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
18.用git log --graph命令可以看到分支合并图：如git log --graph --pretty=oneline --abbrev-commit
19.
















































